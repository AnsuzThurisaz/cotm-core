buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
		classpath 'me.tatarka:gradle-retrolambda:3.2.0'
	}
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'me.tatarka.retrolambda'

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

group = "com.elytradev"
archivesBaseName = "Fondue"
version = config.version

sourceCompatibility = 1.8
targetCompatibility = 1.8

retrolambda {
	javaVersion JavaVersion.VERSION_1_6
	defaultMethods true
}

repositories {
	maven {
		name = 'sonatype-nexus'
		url = 'https://oss.sonatype.org/content/repositories/public/'
	}
	maven {
		name = 'elytra'
		url = 'http://repo.elytradev.com/'
	}
	jcenter()
	ivy {
		artifactPattern "http://unascribed.com/jars/[organisation]/[module].[ext]"
	}
	maven {
		name = 'jei'
		url = "http://dvs1.progwml6.com/files/maven"
	}
	maven {
		name = 'hwyla'
		url "http://tehnut.info/maven"
	}
}

configurations {
	deploy
}

jar {
	classifier = 'slim'
}

shadowJar {
	classifier = ''
	relocate 'com.elytradev.concrete', 'com.elytradev.fondue.repackage.com.elytradev.concrete'
	configurations = [project.configurations.shadow]
}

reobf {
	shadowJar { mappingType = 'SEARGE' }
}

tasks.build.dependsOn reobfShadowJar

artifacts {
	archives shadowJar
}

dependencies {
	deploy 'org.apache.maven.wagon:wagon-ssh:2.10'
	
	shadow 'com.elytradev:concrete:0.1.0'
	compile 'com.elytradev:concrete:0.1.0'
}

minecraft {
	version = config.forge
	mappings = config.mappings

	runDir = "minecraft"

	replaceIn 'src/main/java/com/elytradev/fondue/FondueMod.java'
	replace '@VERSION@', project.version
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
		exclude '*.xcf'
		exclude '*.wav'
	}
}

def parseConfig(File config) {
	if (!config.exists()) return new Properties()
	config.withReader {
		def prop = new Properties()
		prop.load(it)
		return (new ConfigSlurper().parse(prop))
	}
}
